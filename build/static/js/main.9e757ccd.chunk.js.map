{"version":3,"sources":["services/notes.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","newNote","post","id","updatedNote","put","Note","note","toggleImportance","label","importance","content","onClick","App","props","useState","notes","setNotes","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","important","map","find","n","changedNote","returnedNote","console","log","toggleImportanceOf","onSubmit","event","preventDefault","target","newNoteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOACMA,EAAU,2DAmBD,EAjBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe9B,EAZA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAU9B,EALA,SAACG,EAAIC,GAEhB,OADgBR,IAAMS,IAAN,UAAaV,EAAb,YAAwBQ,GAAMC,GAC/BN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCX7C,SAASM,EAAT,GAAyC,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,iBACbC,EAAQF,EAAKG,WACjB,qBAAuB,iBACzB,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAAWJ,EAAnB,SAAsCC,OAuE7BI,MAlEf,SAAaC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAC5B,iBADF,mBAAOd,EAAP,KAAgBiB,EAAhB,KAGA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAAqBxB,MAAK,SAAAyB,GACxBN,EAASM,QAEV,IAEH,IAAMC,EAAcL,EAClBH,EACAA,EAAMS,QAAO,SAAAlB,GAAI,OAAIA,EAAKmB,aAiC5B,OACE,gCACE,uCACA,yBAAQd,QAAW,kBAAMQ,GAAYD,IAArC,kBAAqDA,EAAU,YAAc,SAC7E,6BACGK,EAAYG,KAAI,SAAApB,GAAI,OAAI,cAACD,EAAD,CAAsBC,KAAQA,EAAMC,iBAAoB,YAf5D,SAACL,GACjB,sCAAkCA,GAA3C,IACMI,EAAOS,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAOvB,GAAP,IAAamB,WAAanB,EAAKmB,YAChDJ,EAAmBnB,EAAI2B,GAAahC,MAAK,SAAAiC,GACvCd,EAASD,EAAMW,KAAI,SAAApB,GAAI,OAAIA,EAAKJ,KAAOA,EAAKI,EAAOwB,SAErDC,QAAQC,IAAI,0BAA4B9B,EAAK,qBAQ+C+B,CAAmB3B,EAAKJ,MAA1EI,EAAKJ,SAE7C,uBAAMgC,SArCM,SAACC,GACfA,EAAMC,iBACNL,QAAQC,IAAI,iBAAkBG,EAAME,QACpC,IAAMC,EAAgB,CACpBpC,GAAKa,EAAMwB,OAAS,EACpB7B,QAAUV,EACVwC,MAAO,IAAIC,MAAOC,cAClBjB,UAAYkB,KAAKC,SAAW,IAE9BvB,EAAmBiB,GAAezC,MAAK,SAAAiC,GACrCd,EAASD,EAAM8B,OAAOf,IACtBb,EAAW,QA0BX,UACE,uBACE6B,MAAS9C,EACT+C,SAzBiB,SAACZ,GACxBJ,QAAQC,IAAIG,EAAME,OAAOS,OACzB7B,EAAWkB,EAAME,OAAOS,UAyBpB,wBAAQE,KAAO,SAAf,yBCvERC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9e757ccd.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseURL = 'https://fathomless-caverns-08223.herokuapp.com/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseURL);\n    return request.then(response => response.data);\n}\n\nconst create = newNote => {\n    const request = axios.post(baseURL, newNote);\n    return request.then(response => response.data);\n    //we are transforming the request promise and still are returning the promise\n    //then method returns a promise as well\n}\n\nconst update = (id, updatedNote) => {\n    const request = axios.put(`${baseURL}/${id}`, updatedNote);\n    return request.then(response => response.data);\n}\n\nexport default {\n    getAll, create, update\n}","import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport noteService from './services/notes';\n\n\nfunction Note({note, toggleImportance}) {\n  const label = note.importance\n  ? \"make not important\" : \"make important\"\n  return (\n    <li>\n      {note.content}\n      <button onClick = {toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nfunction App(props) {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\n    \"...a new note\"\n  );\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    })\n  }, [])\n\n  const notesToShow = showAll \n  ? notes \n  : notes.filter(note => note.important);\n\n\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n    const newNoteObject = {\n      id : notes.length + 1,\n      content : newNote,\n      date : new Date().toISOString(),\n      important : Math.random() < 0.5\n    }\n    noteService.create(newNoteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(n => n.id === id);\n    const changedNote = {...note, important : !note.important};\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    })\n    console.log(\"the importance of note \" + id + \"should be toggled\");\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <button onClick = {() => setShowAll(!showAll)}>show {showAll ? \"important\" : \"all\"}</button>\n      <ul>\n        {notesToShow.map(note => <Note key = {note.id} note = {note} toggleImportance = {() => {toggleImportanceOf(note.id)}}/>)}\n      </ul>\n      <form onSubmit = {addNote}>\n        <input \n          value = {newNote}\n          onChange = {handleNoteChange}\n        />\n        <button type = \"submit\">save</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}